package finale.utils;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.TreeSet;

import javax.swing.Timer;

/**
 * This class filters out synthetic KeyRelease+KeyPress pairs generated by the X Window System
 * on platforms such as Linux. Based on http://www.arco.in-berlin.de/keyevent.html, modified
 * to fix some race-condition bugs and compare timestamps.
 * 
 * @author David Liu
 */
public class FilteredKeyListener implements KeyListener, ActionListener {
	private final TreeSet<Integer> set = new TreeSet<Integer>();
	private final Timer timer;

	private KeyEvent releaseEvent;

	private void fireKeyReleased(KeyEvent e) {
		if (e == null)
			return;
		
		if (set.remove(e.getKeyCode())) {
			KeyReleased(e);
		}
		releaseEvent = null;
	}

	public FilteredKeyListener() {
		timer = new Timer(0, this);
	}

	public void KeyPressed(KeyEvent e) {
	}

	public void KeyReleased(KeyEvent e) {
	}

	public void KeyTyped(KeyEvent e) {
	}

	public int getPressedCount() {
		return set.size();
	}

	public void keyPressed(KeyEvent e) {
//		System.err.println(e.paramString());
		if (timer.isRunning()) {
			if (e.getKeyCode() == releaseEvent.getKeyCode() &&
					e.getWhen() == releaseEvent.getWhen()) {
				// Release+Press events are synthetic; same timestamp
				// ignore both events: this KeyPress and the previous KeyRelease
				releaseEvent = null;
				return;
			} else {
				// got a different key, so previous release event must have been real.
				timer.stop();
				fireKeyReleased(releaseEvent);
			}
		}
		
		if (set.add(e.getKeyCode())) {
			KeyPressed(e);
		}
	}

	public void keyReleased(KeyEvent e) {
//		System.err.println(e.paramString());
		if (timer.isRunning()) {
			timer.stop();
			// got another release event, so previous release event must have been real.
			fireKeyReleased(releaseEvent);
			fireKeyReleased(e);
		} else {
			releaseEvent = e;
			timer.restart();
		}
	}

	public void keyTyped(KeyEvent e) {
		KeyTyped(e);
	}

	public void actionPerformed(ActionEvent e) {
		// We timed out and didn't get another key event following the previous release event,
		// so it must have been real.
		timer.stop();
		fireKeyReleased(releaseEvent);
	}
}